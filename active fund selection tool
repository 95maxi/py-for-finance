import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from scipy.cluster.hierarchy import linkage, fcluster
import seaborn as sns
import matplotlib.pyplot as plt
from google.colab import files
from collections import Counter

# Scegliere il file di input
uploaded = files.upload()

# Carica i dati
df = pd.read_excel("Mutual Funds.xlsx", sheet_name = "ottimizzazione pesi ptf")
df = df.set_index("Dates")

# Separare benchmark e fondi
benchmark = df.iloc[:, 0]  # Prima colonna (indice)
funds = df.iloc[:, 1:]  # Dalla seconda colonna in poi (fondi attivi)

# Parametri della strategia
window_size = 52  # Settimane per la selezione dei fondi
holding_period = 5  # Settimane di investimento
num_periods = (len(df) - window_size) // holding_period  # Numero di iterazioni
num_funds = 4  # Numero fisso di fondi selezionati
risk_free_rate = 0.01 / 52  # Tasso risk-free settimanale (es. 1% annuo)

# Variabili per tracciare le performance
overall_portfolio = []
overall_benchmark = []
overall_equally_weighted = []
portfolio_changes = []
previous_selection = set()
selected_funds_list = []  # Per tracciare la frequenza di selezione dei fondi

for i in range(num_periods):
    start_idx = i * holding_period
    end_idx = start_idx + window_size
    invest_idx = end_idx  # Inizio del periodo di investimento
    invest_end_idx = invest_idx + holding_period
    
    if invest_end_idx > len(df):
        break  # Evita di uscire dai dati
    
    # Prendiamo la finestra di dati
    benchmark_window = benchmark.iloc[start_idx:end_idx]
    funds_window = funds.iloc[start_idx:end_idx]
    
    # Calcoliamo i residui
    residuals = {}
    for col in funds_window.columns:
        X = benchmark_window.values.reshape(-1, 1)
        y = funds_window[col].values.reshape(-1, 1)
        model = LinearRegression().fit(X, y)
        resid = y.flatten() - model.predict(X).flatten()
        residuals[col] = resid
    
    residuals_df = pd.DataFrame(residuals)
    correlation_matrix = residuals_df.corr()
    
    # Clustering gerarchico con numero fisso di cluster
    Z = linkage(correlation_matrix, method='ward')
    clusters = fcluster(Z, t=num_funds, criterion='maxclust')  # Imposta 4 cluster
    
    # Selezione dei fondi decorrelati
    selected_funds = []
    for cluster_id in range(1, num_funds + 1):
        cluster_funds = correlation_matrix.columns[clusters == cluster_id]
        if len(cluster_funds) > 0:
            mean_corr = correlation_matrix.loc[cluster_funds, cluster_funds].mean().idxmin()
            selected_funds.append(mean_corr)
    
    # Seleziona esattamente 4 fondi
    while len(selected_funds) < num_funds:
        remaining_funds = set(correlation_matrix.columns) - set(selected_funds)
        next_fund = min(remaining_funds, key=lambda x: correlation_matrix[selected_funds].loc[x].mean())
        selected_funds.append(next_fund)
    
    selected_funds_list.extend(selected_funds)  # Aggiungi alla lista di selezione
    
    # Verifica cambiamenti nel portafoglio
    current_selection = set(selected_funds)
    if previous_selection and current_selection != previous_selection:
        portfolio_changes.append((i, previous_selection, current_selection))
    previous_selection = current_selection
    
    # Performance nel periodo di investimento
    selected_funds_df = funds.iloc[invest_idx:invest_end_idx][selected_funds]
    portfolio_returns = selected_funds_df.mean(axis=1)
    equally_weighted_returns = funds.iloc[invest_idx:invest_end_idx].mean(axis=1)
    benchmark_returns = benchmark.iloc[invest_idx:invest_end_idx]
    
    # Valore cumulato
    if len(overall_portfolio) == 0:
        overall_portfolio = (1 + portfolio_returns).cumprod() * 100
        overall_equally_weighted = (1 + equally_weighted_returns).cumprod() * 100
        overall_benchmark = (1 + benchmark_returns).cumprod() * 100
    else:
        last_value_portfolio = overall_portfolio[-1]
        last_value_benchmark = overall_benchmark[-1]
        last_value_equally_weighted = overall_equally_weighted[-1]
        overall_portfolio = np.concatenate((overall_portfolio, (1 + portfolio_returns).cumprod() * last_value_portfolio))
        overall_equally_weighted = np.concatenate((overall_equally_weighted, (1 + equally_weighted_returns).cumprod() * last_value_equally_weighted))
        overall_benchmark = np.concatenate((overall_benchmark, (1 + benchmark_returns).cumprod() * last_value_benchmark))

# Calcolo metriche di rischio/rendimento
def calculate_metrics(returns):
    mean_return = np.mean(returns) * 52  # Annualizzato
    volatility = np.std(returns) * np.sqrt(52)  # Annualizzato
    sharpe_ratio = (mean_return - risk_free_rate * 52) / volatility  # Sharpe Ratio
    return mean_return, volatility, sharpe_ratio

portfolio_metrics = calculate_metrics(portfolio_returns)
equally_weighted_metrics = calculate_metrics(equally_weighted_returns)
benchmark_metrics = calculate_metrics(benchmark_returns)

# Calcolo della frequenza di selezione dei fondi
fund_selection_count = Counter(selected_funds_list)
df_selection = pd.DataFrame(fund_selection_count.items(), columns=['Fund', 'Selection Count'])
df_selection = df_selection.sort_values(by='Selection Count', ascending=False)
print(df_selection)

# Grafico finale
plt.figure(figsize=(12, 6))
plt.plot(overall_portfolio, label='Portafoglio Ottimizzato', color='red', linestyle='dashed', linewidth=2)
plt.plot(overall_equally_weighted, label='Portafoglio Equipesato', color='green', linestyle='dotted', linewidth=2)
plt.plot(overall_benchmark, label='Benchmark', color='blue', linewidth=2)
plt.xlabel("Settimane")
plt.ylabel("Valore Normalizzato")
plt.title("Performance Rolling del Portafoglio vs Benchmark")
plt.legend()
plt.grid(True)
plt.show()

# Conclusioni sui benefici di diversificazione
print("\nMetriche di rischio/rendimento:")
print(f"Portafoglio Ottimizzato: Rendimento: {portfolio_metrics[0]:.2f}%, Volatilità: {portfolio_metrics[1]:.2f}%, Sharpe Ratio: {portfolio_metrics[2]:.2f}")
print(f"Portafoglio Equipesato: Rendimento: {equally_weighted_metrics[0]:.2f}%, Volatilità: {equally_weighted_metrics[1]:.2f}%, Sharpe Ratio: {equally_weighted_metrics[2]:.2f}")
print(f"Benchmark: Rendimento: {benchmark_metrics[0]:.2f}%, Volatilità: {benchmark_metrics[1]:.2f}%, Sharpe Ratio: {benchmark_metrics[2]:.2f}")

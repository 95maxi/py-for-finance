import numpy as np
import pandas as pd
import datetime as dt
import math

#parte grafica
import seaborn
import matplotlib.pyplot as plt
seaborn.set()

#caricamento input
from google.colab import files
uploaded = files.upload()



#CARICAMENTO INPUT

#evoluzione portafoglio "Equity USA"
UE = pd.read_excel("prova_ag_x_colab (1).xlsx", sheet_name = "UE")  #UE = usa equity
EE = pd.read_excel("prova_ag_x_colab (1).xlsx", sheet_name = "EE") #EE = europe equity

#scarico prezzi strumenti sottostanti
prezzi = pd.read_excel("prova_ag_x_colab.xlsx", sheet_name = "prezzi")
#imposto la data come indice della variabile "prezzi"
prezzi.set_index("data", inplace=True)


def calcolo_pesi(df):

  # creo variabile isin univoci
  isin_univoci = df[["cod. ISIN"]].drop_duplicates()["cod. ISIN"]
  # creo variabile data inizio
  data_inizio = df["data inizio val."].iloc[-1].date()
  # creo varaibile data fine
  data_fine = dt.datetime.now().date()
  # creo serie storica con data di inizio e fine
  serie_storica = pd.date_range(start = data_inizio, end = data_fine)
  # creo dataframe con isin univoci come colonne e serie temporale come indice
  df_pesi = pd.DataFrame(columns = isin_univoci,
                        index = serie_storica)
  
  # a ciclo aggiugo i pesi per gli isin
  for version in df["versione portafoglio"].drop_duplicates()[::-1]:


    try:
      data = df.set_index("versione portafoglio").loc[version, "data inizio val."].iloc[0].date()
    except:
      data = df.set_index("versione portafoglio").loc[version, "data inizio val."].date()

      
    data = pd.date_range(start = data, end = data)

    pesi = np.array(df.set_index("versione portafoglio").loc[version, "% modello"])
    isin = df.set_index("versione portafoglio").loc[version, "cod. ISIN"]

    df_pesi.loc[data] = 0
    df_pesi.loc[data, isin] = np.array(pesi)

  
  #df_pesi = df_pesi.ffill().fillna(0)


  return df_pesi



def weight_drift(df_pesi, prezzi):
  
  # creo variabili rendimenti dei fondi e benchmark
  rendimenti = prezzi.pct_change()

  # calcolo variazione pesi per effetto mercato, tenendo conto di eventuali rebalancing
  for index in range(1,len(df_pesi)): 


      if df_pesi.iloc[index].sum() == 100:
        pass

      else:

        try:

          #df_pesi.iloc[index] = (df_pesi.iloc[index-1] * rendimenti.loc[df_pesi.iloc[index].name][:-1]) + df_pesi.iloc[index-1]
          df_pesi.iloc[index] = (df_pesi.iloc[index-1] * rendimenti.loc[df_pesi.iloc[index].name][:-1][df_pesi.iloc[index].index]) + df_pesi.iloc[index-1]

        except:
          df_pesi.iloc[index] = df_pesi.iloc[index-1]

        pass

  #ribaso la somma dei pesi a 100
  for ind in range(len(df_pesi)):

    somma = df_pesi.iloc[ind].sum()
    df_pesi.iloc[ind] = df_pesi.iloc[ind] / somma * 100  

    
  df_pesi = df_pesi / 100

  
  return df_pesi, rendimenti




def serie_storica_portafoglio(df_pesi, rendimenti, prezzi, name_bmk):

  # creo dataframe per serie storica portafoglio
  portafoglio = pd.DataFrame(index = df_pesi.index,
                            columns = ["rendimenti"])


  # calcolo serie storica rendimento portafoglio
  for ind in range(len(df_pesi)):
    
    try:
      portafoglio.loc[df_pesi.iloc[ind].name] = (df_pesi.iloc[ind] * rendimenti.loc[df_pesi.iloc[ind].name][:-1]).sum()

    except:
      portafoglio.loc[df_pesi.iloc[ind].name] = 0

  # elimino valori di sabato e domenica
  for day in portafoglio.index:

    if day.weekday() in [5,6]:
      portafoglio.drop(index=day, inplace=True)

  
  portafoglio["benchmark"] = prezzi[name_bmk].pct_change()  #prima era "bmk"
  portafoglio["tracking error"] = portafoglio["rendimenti"] - portafoglio["benchmark"]


  return portafoglio


#funzione per grafico
def serie_storica_linea_bmk_base_100(portafoglio, prezzi):

  prezzi_base_100 = pd.DataFrame(index = portafoglio.index,
                                  columns = ["linea","benchmark"])
    
  prezzi_base_100.iloc[0] = 100


  for asset in [0,1] :

    for indice in range(1, len(prezzi_base_100.index)):

      prezzi_base_100.iloc[indice, asset] = prezzi_base_100.iloc[indice-1, asset] * portafoglio.iloc[indice, asset] + prezzi_base_100.iloc[indice-1, asset]

  return prezzi_base_100
  
  
  
  
  
#creo funzione che esegue funzioni create
def final_func(ptf, name_bmk):

  df_pesi = calcolo_pesi(ptf)
  df_pesi, rendimenti = weight_drift(df_pesi, prezzi)
  portafoglio = serie_storica_portafoglio(df_pesi, rendimenti, prezzi, name_bmk)

  return portafoglio
  
  
  
#chiamo la funzione
final_func(UE, "UE bmk").head()


ptf_UE = serie_storica_linea_bmk_base_100(final_func(UE, "UE bmk"), prezzi)


#visualizzo graficamente la performance della linea contro benchmark
plt.figure(figsize=(20,7))

plt.plot(ptf_UE.loc[:,"linea"], label = ptf_UE.columns[0])
plt.plot(ptf_UE.loc[:,"benchmark"], label = ptf_UE.columns[1])


plt.legend(loc="upper left")
plt.title("Andamento USA Equity", size = 24)
plt.show()


